package main

import (
	"asterisk-monitor/config"
	monitor "asterisk-monitor/monitors"
	"asterisk-monitor/ui"
	"fmt"
	"os"
	"os/exec"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
)

type appModel struct {
	currentView string
	dashboard   ui.DashboardModel
	diagnostics ui.DiagnosticsModel
	channels    ui.ChannelsModel
	logs        ui.LogsModel
	security    ui.SecurityModel
	backup      ui.BackupModel
	debug       ui.DebugModel
	settings    ui.SettingsModel
	monitor     *monitor.LinuxMonitor
}

func initialAppModel(configManager *config.ConfigManager) appModel {
	mon := monitor.NewLinuxMonitor()

	return appModel{
		currentView: "dashboard",
		dashboard:   ui.NewDashboardModel(mon),
		diagnostics: ui.NewDiagnosticsModel(mon),
		channels:    ui.NewChannelsModel(mon),
		logs:        ui.NewLogsModel(mon),
		security:    ui.NewSecurityModel(mon),
		backup:      ui.NewBackupModel(mon),
		debug:       ui.NewDebugModel(mon),
		settings:    ui.NewSettingsModel(configManager),
		monitor:     mon,
	}
}

func (m appModel) Init() tea.Cmd {
	return m.dashboard.Init()
}

func (m appModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmd tea.Cmd

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "1":
			m.currentView = "dashboard"
			cmd = m.dashboard.Init()
		case "2":
			m.currentView = "diagnostics"
			cmd = m.diagnostics.Init()
		case "3":
			m.currentView = "channels"
			cmd = m.channels.Init()
		case "4":
			m.currentView = "logs"
			cmd = m.logs.Init()
		case "5":
			m.currentView = "security"
			cmd = m.security.Init()
		case "6":
			m.currentView = "backup"
			cmd = m.backup.Init()
		case "7":
			m.currentView = "settings"
			cmd = m.settings.Init()
		case "8":
			m.currentView = "debug"
			cmd = m.debug.Init()
		case "q", "Q", "ctrl+c":
			return m, tea.Quit
		}
	}

	switch m.currentView {
	case "dashboard":
		newModel, newCmd := m.dashboard.Update(msg)
		m.dashboard = newModel.(ui.DashboardModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "diagnostics":
		newModel, newCmd := m.diagnostics.Update(msg)
		m.diagnostics = newModel.(ui.DiagnosticsModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "channels":
		newModel, newCmd := m.channels.Update(msg)
		m.channels = newModel.(ui.ChannelsModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "logs":
		newModel, newCmd := m.logs.Update(msg)
		m.logs = newModel.(ui.LogsModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "security":
		newModel, newCmd := m.security.Update(msg)
		m.security = newModel.(ui.SecurityModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "backup":
		newModel, newCmd := m.backup.Update(msg)
		m.backup = newModel.(ui.BackupModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "debug":
		newModel, newCmd := m.debug.Update(msg)
		m.debug = newModel.(ui.DebugModel)
		if newCmd != nil {
			cmd = newCmd
		}
	case "settings":
		newModel, newCmd := m.settings.Update(msg)
		m.settings = newModel.(ui.SettingsModel)
		if newCmd != nil {
			cmd = newCmd
		}
	}

	return m, cmd
}

func (m appModel) View() string {
	var view string

	switch m.currentView {
	case "dashboard":
		view = m.dashboard.View()
	case "diagnostics":
		view = m.diagnostics.View()
	case "channels":
		view = m.channels.View()
	case "logs":
		view = m.logs.View()
	case "security":
		view = m.security.View()
	case "backup":
		view = m.backup.View()
	case "debug":
		view = m.debug.View()
	case "settings":
		view = m.settings.View()
	default:
		view = m.dashboard.View()
	}

	return m.renderHeader() + "\n" + view
}

func (m appModel) renderHeader() string {
	views := []string{
		"1: Dashboard",
		"2: Diagnostics",
		"3: Channels",
		"4: Logs",
		"5: Security",
		"6: Backup",
		"7: Settings",
		"8: Debug",
	}

	var currentViewName string
	switch m.currentView {
	case "dashboard":
		currentViewName = "üìä Dashboard"
	case "diagnostics":
		currentViewName = "üîç Diagnostics"
	case "channels":
		currentViewName = "üìû Channels"
	case "logs":
		currentViewName = "üìã Logs"
	case "security":
		currentViewName = "üõ°Ô∏è Security"
	case "backup":
		currentViewName = "üíæ Backup"
	case "settings":
		currentViewName = "‚öôÔ∏è Settings"
	case "debug":
		currentViewName = "üêõ Debug"
	}

	header := fmt.Sprintf("Asterisk Monitor - %s", currentViewName)
	navigation := strings.Join(views, " | ")

	return ui.TitleStyle.Render(header) + "\n" +
		ui.InfoStyle.Render(navigation) + "\n" +
		strings.Repeat("‚îÄ", 80)
}

func main() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Asterisk
	if !isAsteriskInstalled() {
		fmt.Println("‚ùå Asterisk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
		fmt.Println("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Asterisk –¥–ª—è Linux:")
		fmt.Println("  Ubuntu/Debian: sudo apt install asterisk")
		fmt.Println("  CentOS/RHEL:   sudo yum install asterisk")
		fmt.Println("  Arch:          sudo pacman -S asterisk")
		os.Exit(1)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
	if !hasAsteriskAccess() {
		fmt.Println("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Asterisk")
		fmt.Println("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ asterisk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ root")
		fmt.Print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")

		var response string
		fmt.Scanln(&response)
		if strings.ToLower(response) != "y" {
			os.Exit(0)
		}
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	configManager := config.NewConfigManager()
	if err := configManager.Load(); err != nil {
		fmt.Printf("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v\n", err)
		fmt.Println("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	}

	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ Asterisk Monitor...")
	fmt.Println("   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏: 1-5")
	fmt.Println("   –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –∏–ª–∏ Q")

	model := initialAppModel(configManager)
	p := tea.NewProgram(model, tea.WithAltScreen())
	if _, err := p.Run(); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %v\n", err)
		os.Exit(1)
	}
}

func isAsteriskInstalled() bool {
	_, err := exec.LookPath("asterisk")
	return err == nil
}

func hasAsteriskAccess() bool {
	cmd := exec.Command("asterisk", "-rx", "core show version")
	err := cmd.Run()
	return err == nil
}
